<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>ge0n0sis.github.io</title><link href="https://ge0n0sis.github.io/" rel="alternate"></link><link href="https://ge0n0sis.github.io/feeds/all.atom.xml" rel="self"></link><id>https://ge0n0sis.github.io/</id><updated>2016-05-25T00:00:00+02:00</updated><entry><title>How to lock the samsung download mode using an undocumented feature of aboot</title><link href="https://ge0n0sis.github.io/posts/2016/05/how-to-lock-the-samsung-download-mode-using-an-undocumented-feature-of-aboot/" rel="alternate"></link><published>2016-05-25T00:00:00+02:00</published><author><name>Andr√© MOULU</name></author><id>tag:ge0n0sis.github.io,2016-05-25:posts/2016/05/how-to-lock-the-samsung-download-mode-using-an-undocumented-feature-of-aboot/</id><summary type="html">&lt;div class="section" id="introduction"&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Most of the time, when you read an article on bootloader and security, there are chances that it will talk about exploiting a vulnerability to unlock a bootloader. This article takes a different path and explains how to &lt;strong&gt;lock&lt;/strong&gt; Samsung's proprietary bootloader (aboot) and to disable the download mode.&lt;/p&gt;
&lt;p&gt;In France, and certainly in many countries, Samsung sells smartphones with an unlocked bootloader. That's cool, you can easily root your device. Unfortunately, this also means that anyone can take your phone and flash it in order to infect your phone or to grab your data. To the best of our knowledge, there is no public way to lock your bootloader and to prevent that attack scenario from happening.&lt;/p&gt;
&lt;p&gt;Fortunately for us, Samsung left an "&lt;a class="reference external" href="https://www.stigviewer.com/stig/samsung_android_with_knox_1.x/2014-04-22/finding/V-48251"&gt;undocumented&lt;/a&gt;" mechanism in their devices to lock the download mode and to prevent a third party from flashing anything through ODIN.
This article is based on Samsung Galaxy S5, but it should works on many others Samsung devices.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="samsung-aboot-bootloader"&gt;
&lt;h2 id="samsung-aboot-bootloader"&gt;Samsung aboot bootloader&lt;/h2&gt;
&lt;p&gt;When you power on a smartphone, several bootloaders are executed consecutively. Most of the time, you have a PBL (Primary Boot Loader) which is stored in ROM that is executed the first. It loads and executes a SBL (Secondary Boot Loader) which is stored in Flash. PBL and SBL are bootloaders provided by the SoC manufacturer and you can't modify them because they are stored in ROM or they are signed. To allow an OEM to have his own bootloader, the SBL loads and executes the OEM bootloader if its signature is verified. For Samsung devices, the OEM bootloader is &lt;em&gt;aboot&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;What is interesting for us is that aboot is based on an open-source bootloader called LK (&lt;a class="reference external" href="https://android.googlesource.com/kernel/lk/"&gt;Little Kernel&lt;/a&gt;). This helped a lot during reverse engineering, because one can recover symbols using strings leftover, or by recompilating the LK bootloader and diffing with aboot. But first, let's get our hand on aboot binary.&lt;/p&gt;
&lt;p&gt;The aboot bootloader can be easily extracted from a Samsung ROM:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ tar tvf G900FXXU1BNL9_G900FOXX1BNL3_G900FXXU1BNL9_HOME.tar.md5
-rw-rw-r-- dpi/dpi      &lt;span class="m"&gt;986200&lt;/span&gt; 2014-12-18 11:09 aboot.mbn
-rw-rw-r-- dpi/dpi     &lt;span class="m"&gt;7590656&lt;/span&gt; 2014-12-18 11:09 NON-HLOS.bin
-rw-rw-r-- dpi/dpi      &lt;span class="m"&gt;228488&lt;/span&gt; 2014-12-18 11:08 rpm.mbn
-rw-rw-r-- dpi/dpi      &lt;span class="m"&gt;317572&lt;/span&gt; 2014-12-18 11:08 sbl1.mbn
-rw-rw-r-- dpi/dpi      &lt;span class="m"&gt;361476&lt;/span&gt; 2014-12-18 11:08 tz.mbn
-rw-rw-r-- dpi/dpi    &lt;span class="m"&gt;12343568&lt;/span&gt; 2014-12-18 11:09 boot.img
-rw-rw-r-- dpi/dpi    &lt;span class="m"&gt;12747024&lt;/span&gt; 2014-12-18 11:09 recovery.img
-rw-r--r-- dpi/dpi  &lt;span class="m"&gt;2373600960&lt;/span&gt; 2014-12-18 11:10 system.img.ext4
-rw-r--r-- dpi/dpi    &lt;span class="m"&gt;54855424&lt;/span&gt; 2014-12-18 07:25 modem.bin
-rw-r--r-- dpi/dpi    &lt;span class="m"&gt;50708700&lt;/span&gt; 2014-12-24 04:23 cache.img.ext4
-rw-r--r-- dpi/dpi     &lt;span class="m"&gt;7270584&lt;/span&gt; 2014-12-24 04:23 hidden.img.ext4
$ tar xvf G900FXXU1BNL9_G900FOXX1BNL3_G900FXXU1BNL9_HOME.tar.md5 aboot.mbn
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We get a MBN file, which is simply an ARM executable code prefixed with a 40 bytes (0x28) &lt;a class="reference external" href="http://newandroidbook.com/Articles/aboot.html"&gt;header&lt;/a&gt;. In this header, we can find the ImgBase of aboot which
will be used in IDA Pro to rebase the binary:&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="aboot header parsed by 010editor" src="/static/images/aboot/aboot_header.png"/&gt;
&lt;/div&gt;
&lt;p&gt;The first thing we see in the bootloader's executable code is the Exception Vector Table:&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Exception Vector Table of aboot" src="/static/images/aboot/evt.png"/&gt;
&lt;/div&gt;
&lt;p&gt;From &lt;code class="cpp"&gt;&lt;span class="n"&gt;_reset&lt;/span&gt;&lt;/code&gt; to &lt;code class="cpp"&gt;&lt;span class="n"&gt;aboot_init&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/code&gt; functions, we have classical LK flow of execution. Functions called until &lt;code class="cpp"&gt;&lt;span class="n"&gt;aboot_init&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/code&gt; are mostly executed for hardware/memory initialization purpose.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="callgraph from _reset() to aboot_init()" src="/static/images/aboot/callgraph.png"/&gt;
&lt;/div&gt;
&lt;p&gt;There are no symbols in the aboot.mbn file. However, it's based on the opensource LK bootloader. Thus, it's pretty easy most of the time to recover symbols, especially when &lt;code class="cpp"&gt;&lt;span class="n"&gt;dprintf&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/code&gt; debug logs are left in the binary.
More symbols can also be identified by compiling LK from qualcomm msm8974 SoC and by using bindiff (&lt;em&gt;Pro-tip: Bindiff's algorithm "string references" can give interesting results.&lt;/em&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone https://android.googlesource.com/kernel/lk -b qcom-dima-8x74-fixes
$ &lt;span class="nb"&gt;cd&lt;/span&gt; lk
$ &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;TOOLCHAIN_PREFIX&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;arm-linux-gnueabi
$ make msm8974
$ ls build-msm8974
app  arch  config.h  dev  emmc_appsboot.mbn  emmc_appsboot.raw  EMMCBOOT.MBN  kernel  lib  lk  lk.bin  lk.debug.lst  lk.lst  lk.size  lk.sym  mkheader  platform  system-onesegment.ld  target
$ file build-msm8974/lk
lk: ELF 32-bit LSB executable, ARM, EABI5 version &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;SYSV&lt;span class="o"&gt;)&lt;/span&gt;, statically linked, not stripped
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="bindiff results between LK and Aboot" src="/static/images/aboot/bindiff.png"/&gt;
&lt;/div&gt;
&lt;p&gt;Let's get back on the topic. We are in the &lt;code class="cpp"&gt;&lt;span class="n"&gt;aboot_init&lt;/span&gt;&lt;/code&gt; function.
Traditionally, this function is used to choose in which mode the device should boot. According to pressed hardware keys (if the user presses VOLUME_UP for example) or the boot reason, it can start fastboot, boot in recovery or boot Android from the flash.
In Samsung's case, it can additionally load the download mode when the user press VOLUME_DOWN and HOME keys.&lt;/p&gt;
&lt;p&gt;A few instructions before the launch of ODIN through a call to &lt;code class="cpp"&gt;&lt;span class="n"&gt;odin3_init&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/code&gt;, something catches our eyes:&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="CC flag value check before odin3_init()" src="/static/images/aboot/is_CC_mode.png"/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="cc-mode-and-the-param-partition"&gt;
&lt;h2 id="cc-mode-and-the-param-partition"&gt;CC mode and the param partition&lt;/h2&gt;
&lt;p&gt;Based on the CFG in the previous screenshot, we note that the bootloader
will either execute &lt;code class="cpp"&gt;&lt;span class="n"&gt;odin3_init&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/code&gt; or display the message "DOWNLOAD IS BLOCKED BY CC MODE" on screen
depending on &lt;code class="cpp"&gt;&lt;span class="n"&gt;is_CC_mode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/code&gt; return value.&lt;/p&gt;
&lt;p&gt;When disassembled, &lt;code class="cpp"&gt;&lt;span class="n"&gt;is_CC_mode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/code&gt; has the following instructions:&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="is_cc_mode() disassembly" src="/static/images/aboot/is_cc_mode_func.png"/&gt;
&lt;/div&gt;
&lt;p&gt;It returns the DWORD located at &lt;tt class="docutils literal"&gt;0xF8E9054&lt;/tt&gt;. Xrefs for this address indicates
that only one function writes at this location. Let's rename this function to &lt;code class="cpp"&gt;&lt;span class="n"&gt;init_cc_flag_value&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="init_cc_flag_value() decompiled code" src="/static/images/aboot/init_cc_flag_value.png"/&gt;
&lt;/div&gt;
&lt;p&gt;From a high level point of view, a 64 bytes buffer is read via the function renamed &lt;code class="cpp"&gt;&lt;span class="n"&gt;do_param_partition_operation&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/code&gt;, transformed
into another smaller buffer (32 bytes) via the function renamed to &lt;code class="cpp"&gt;&lt;span class="n"&gt;tranform_data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/code&gt; and finally, some comparisons are done on this buffer to check
if the CC flag should be set to 1 or 0. It's important to note that the &lt;code class="cpp"&gt;&lt;span class="n"&gt;init_cc_flag_value&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/code&gt; is called by the &lt;code class="cpp"&gt;&lt;span class="n"&gt;aboot_init&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/code&gt; function in
&lt;code class="cpp"&gt;&lt;span class="n"&gt;aboot_check_mode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let's go a bit deeper by analyzing the functions &lt;code class="cpp"&gt;&lt;span class="n"&gt;do_param_partition_operation&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/code&gt; and &lt;code class="cpp"&gt;&lt;span class="n"&gt;transform_data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The function &lt;code class="cpp"&gt;&lt;span class="n"&gt;do_param_partition_operation&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/code&gt; is used to read or write data into a partition named "param". The reconstructed function header can be:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;do_param_partition_operation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;operation&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The param partition is used to store different types of data that are Samsung-specific. The &lt;code class="cpp"&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;/code&gt; parameter
is used to calculate the offset at which the operation will be done. The &lt;code class="cpp"&gt;&lt;span class="n"&gt;operation&lt;/span&gt;&lt;/code&gt; parameter is used to specify if we want to read (0) or
write (1) data. And finally &lt;code class="cpp"&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;/code&gt; and &lt;code class="cpp"&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;/code&gt; are used to specify the address of the buffer to be read or to be written and its size.&lt;/p&gt;
&lt;p&gt;Based on these information, the call to &lt;code class="cpp"&gt;&lt;span class="n"&gt;do_param_partition_operation&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/code&gt; in &lt;code class="cpp"&gt;&lt;span class="n"&gt;init_cc_flag_value&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/code&gt; reads 64 bytes
from the &lt;em&gt;param&lt;/em&gt; partition starting at the offset (end - 2048) and stores the bytes read into &lt;code class="cpp"&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;/code&gt;;&lt;/p&gt;
&lt;p&gt;Let's take a look at the data located at this offset. Dumping the param partition on a Samsung Galaxy S5 gives us the following results:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ adb shell
shell@klte:/ $ su
root@klte:/data/local/tmp &lt;span class="c1"&gt;# dd if=/dev/block/param of=/sdcard/param.raw bs=4096&lt;/span&gt;
$ adb pull /sdcard/param.raw
$ hexdump -C param.raw
&lt;span class="m"&gt;00000000&lt;/span&gt;  &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt;  &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;01&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt;................&lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="m"&gt;00000010&lt;/span&gt;  &lt;span class="m"&gt;01&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt;  &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt;................&lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="m"&gt;00000020&lt;/span&gt;  &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt;  &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt;................&lt;span class="p"&gt;|&lt;/span&gt;
*
&lt;span class="m"&gt;00900000&lt;/span&gt;  &lt;span class="m"&gt;44&lt;/span&gt; 4c 4f &lt;span class="m"&gt;57&lt;/span&gt; &lt;span class="m"&gt;04&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt;  &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;01&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt;DLOW............&lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="m"&gt;00900010&lt;/span&gt;  &lt;span class="m"&gt;01&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt;  &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt;................&lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="m"&gt;00900020&lt;/span&gt;  &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt;  &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt;................&lt;span class="p"&gt;|&lt;/span&gt;
*
009ff400  &lt;span class="m"&gt;04&lt;/span&gt; &lt;span class="m"&gt;47&lt;/span&gt; &lt;span class="m"&gt;39&lt;/span&gt; &lt;span class="m"&gt;30&lt;/span&gt; &lt;span class="m"&gt;30&lt;/span&gt; &lt;span class="m"&gt;46&lt;/span&gt; &lt;span class="m"&gt;58&lt;/span&gt; &lt;span class="m"&gt;58&lt;/span&gt;  &lt;span class="m"&gt;55&lt;/span&gt; &lt;span class="m"&gt;31&lt;/span&gt; &lt;span class="m"&gt;42&lt;/span&gt; 4f &lt;span class="m"&gt;42&lt;/span&gt; &lt;span class="m"&gt;37&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt;.G900FXXU1BOB7..&lt;span class="p"&gt;|&lt;/span&gt;
009ff410  &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt;  &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt;................&lt;span class="p"&gt;|&lt;/span&gt;
*
009ff800  &lt;span class="m"&gt;66&lt;/span&gt; 9a &lt;span class="m"&gt;46&lt;/span&gt; f2 fe &lt;span class="m"&gt;58&lt;/span&gt; d0 b7  b3 dc ad &lt;span class="m"&gt;51&lt;/span&gt; c6 &lt;span class="m"&gt;00&lt;/span&gt; 6a be  &lt;span class="p"&gt;|&lt;/span&gt;f.F..X.....Q..j.&lt;span class="p"&gt;|&lt;/span&gt;
009ff810  c7 3b &lt;span class="m"&gt;41&lt;/span&gt; b3 &lt;span class="m"&gt;65&lt;/span&gt; &lt;span class="m"&gt;81&lt;/span&gt; &lt;span class="m"&gt;80&lt;/span&gt; 3c  &lt;span class="m"&gt;70&lt;/span&gt; &lt;span class="m"&gt;44&lt;/span&gt; &lt;span class="m"&gt;55&lt;/span&gt; 2f 1c cb a0 b5  &lt;span class="p"&gt;|&lt;/span&gt;.&lt;span class="p"&gt;;&lt;/span&gt;A.e..&amp;lt;pDU/....&lt;span class="p"&gt;|&lt;/span&gt;
009ff820  f9 &lt;span class="m"&gt;56&lt;/span&gt; &lt;span class="m"&gt;18&lt;/span&gt; 9e &lt;span class="m"&gt;06&lt;/span&gt; d3 &lt;span class="m"&gt;13&lt;/span&gt; 8e  7d b3 2b &lt;span class="m"&gt;75&lt;/span&gt; 4c b4 c5 &lt;span class="m"&gt;13&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt;.V......&lt;span class="o"&gt;}&lt;/span&gt;.+uL...&lt;span class="p"&gt;|&lt;/span&gt;
009ff830  &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt;  &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt;................&lt;span class="p"&gt;|&lt;/span&gt;
*
009ffc00  bb 2d e1 bf bb 1e 8b &lt;span class="m"&gt;10&lt;/span&gt;  d8 e7 &lt;span class="m"&gt;49&lt;/span&gt; 0b ca &lt;span class="m"&gt;42&lt;/span&gt; 4d 7b  &lt;span class="p"&gt;|&lt;/span&gt;.-........I..BM&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;
009ffc10  &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt;  &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt;................&lt;span class="p"&gt;|&lt;/span&gt;
*
00a00000
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The param partition has a size of 0x00A00000 and we want to read the last 2048 bytes, which means we will start reading at hex(0x00a00000 - 2048) =&amp;gt; 0x9ff800.
Looking at the hexdump output, this buffer of 64 bytes is not human readable and looks like random bytes. It is probably encrypted.&lt;/p&gt;
&lt;p&gt;Let's try to understand how these data are used when the function renamed to &lt;code class="cpp"&gt;&lt;span class="n"&gt;transform_data&lt;/span&gt;&lt;/code&gt; is called:&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="transform_data() decompiled code" src="/static/images/aboot/transform_data_crypto.png"/&gt;
&lt;/div&gt;
&lt;p&gt;Multiple functions are called inside &lt;code class="cpp"&gt;&lt;span class="n"&gt;transform_data&lt;/span&gt;&lt;/code&gt; and it seems to initialize properties of an object that has been renamed ctx (for context). The signature of these functions make us think of cryptography primitives: we have a buffer of 16 bytes at &lt;code class="cpp"&gt;&lt;span class="n"&gt;dword_F8E7AD0&lt;/span&gt;&lt;/code&gt; (maybe an IV?), a big "table" of 40960 bytes (certainly multiple smaller tables) at &lt;code class="cpp"&gt;&lt;span class="n"&gt;dword_F8DDAD0&lt;/span&gt;&lt;/code&gt; and power of 2 constants (16/32).&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="whitebox tables" src="/static/images/aboot/wb_table.png"/&gt;
&lt;/div&gt;
&lt;p&gt;One of the inner function called by &lt;code class="cpp"&gt;&lt;span class="n"&gt;transform_data&lt;/span&gt;&lt;/code&gt; is a substitution on a 16 bytes array, which reminds SubBytes operation in AES:&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="kind of subbytes function" src="/static/images/aboot/subbytes.png"/&gt;
&lt;/div&gt;
&lt;p&gt;It seems that we are indeed in presence of cryptography, probably AES related. It looks like a &lt;a class="reference external" href="http://www.whiteboxcrypto.com"&gt;whitebox cryptography&lt;/a&gt; implementation as we only have tables but no hardcoded key.&lt;/p&gt;
&lt;p&gt;Instead of reverse engineering these functions, which can be time consuming without symbols, let's try to search for binaries related to them:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ grep -Rn NOCC .
system/lib/libSecurityManagerNative.so
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;YAY! A result! And the exported functions look promising:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;...&lt;span class="o"&gt;]&lt;/span&gt;
getCCModeFlag 0x00035A8
getSBFlag 0x0002D6C
setCCModeFlag 000030D0
&lt;span class="o"&gt;[&lt;/span&gt;...&lt;span class="o"&gt;]&lt;/span&gt;
WAES_Create_Cipher 0x0004B1C
WAES_Decrypt 0x0004C0C
WAES_Encrypt 0x0004BAC
WAES_Free_Cipher 0x0004C68
WAES_Set_Initial_Vector 0x0004C78
WAES_Set_T_Box 0x0004B44
&lt;span class="o"&gt;[&lt;/span&gt;...&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Pretty interesting, isn't it ? We have functions to get/set CC flag, and many functions prefixed by WAES (for Whitebox AES ?) :)&lt;/p&gt;
&lt;p&gt;To sum up, if we put specific data at a specific location in the param partition, then we can prevent aboot to switch the download mode.
This data is encrypted by something that seems to be a whitebox AES implementation. This becomes more interesting :)&lt;/p&gt;
&lt;p&gt;One may think that forging AES encrypted data without having the key seems to be problematic, but it's not. Even if I'm not a crypto guy
and I don't break the whitebox AES implementation (maybe in a next blog post?), I can still use the whitebox as an oracle and
ask it to encrypt or decrypt data for me without having to know the key.&lt;/p&gt;
&lt;p&gt;Indeed, we can invoke the code inside libSecurityManagerNative.so with &lt;code class="cpp"&gt;&lt;span class="n"&gt;dlsym&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/code&gt;/&lt;code class="cpp"&gt;&lt;span class="n"&gt;dlopen&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/code&gt;. The library contains a function named
&lt;code class="cpp"&gt;&lt;span class="n"&gt;setSBFlag&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/code&gt; which will write NOCC or FFOC based on the value (1 or 0) of its 2nd argument:&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="write_SBFlag() decompiled code" src="/static/images/aboot/write_SBFlag.png"/&gt;
&lt;/div&gt;
&lt;p&gt;Let's build a simple wrapper around this library:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;dlfcn.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Usage: %s &amp;lt;0/1&amp;gt; (0: unlock, 1: lock)&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dlopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/system/lib/libSecurityManagerNative.so"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;RTLD_LAZY&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"lib = %p&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"dlerror: %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;dlerror&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;//setSBFlag(int arg1, int arg2)&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;setSBFlag&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;setSBFlag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dlsym&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"setSBFlag"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"setSBFlag = %p&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;setSBFlag&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SBFlag&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Unlocking the download mode!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;setSBFlag&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Locking the download mode!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;setSBFlag&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, we only have to push this wrapper in /data/local/tmp and run it as root:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ adb push change_lock_status /data/local/tmp
$ adb shell
shell@klte:/ $ su
root@klte:/data/local/tmp &lt;span class="c1"&gt;# ./change_lock_status 1&lt;/span&gt;
$ adb reboot download
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And finally here is the result:&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="example of locked download mode" src="/static/images/aboot/download_locked.png"/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="custom-recovery-and-adbd"&gt;
&lt;h2 id="custom-recovery-and-adbd"&gt;Custom recovery and adbd&lt;/h2&gt;
&lt;p&gt;This is great, your download mode is locked! Now, what if you soft-brick your device for a random reason and you need to reflash it ? You can't access download mode anymore, which is a bit problematic.&lt;/p&gt;
&lt;p&gt;To prevent such access loss and to allow easy switching between locked and unlocked state, I decided to implement a new command inside the adbd daemon and to put the modified adbd in the recovery of my smartphone. This way, each time I need to unlock the download mode, I only have to boot in recovery, enter the good password through the custom adb command, and then reboot in download mode.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: to implement this quick and dirty PoC, I used a Samsung Galaxy S5 (SM-G900F) test device running Android 5.0 (LRX21T.G900FXXU1BNL9)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Because we need to allow modification of &lt;em&gt;param&lt;/em&gt; partition, our custom adbd binary has to be executed as root. To avoid bypass or security issues, we need to reduce the attack surface and we must not to expose &lt;em&gt;adbd&lt;/em&gt; functionalities like &lt;em&gt;adb shell&lt;/em&gt; or jdwp. I have chosen to implement a new &lt;a class="reference external" href="http://androidxref.com/5.0.0_r2/xref/system/core/adb/SERVICES.TXT"&gt;service&lt;/a&gt; (command) in minadbd instead reusing of adbd. &lt;a class="reference external" href="http://androidxref.com/5.0.0_r2/xref/bootable/recovery/minadbd/README.txt"&gt;Minadbd is a light version of adbd&lt;/a&gt;, used generally to expose only the adb sideloading feature of a stock recovery.&lt;/p&gt;
&lt;p&gt;These are my modifications of minadbd's source code from AOSP:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;We need to modify the Android.mk of minadbd to build a ELF static binary executable instead of the default libminadbd. You can append these lines at the end of the default minadbd's Android.mk file:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# minadbd binary&lt;/span&gt;
&lt;span class="c1"&gt;# =========================================================&lt;/span&gt;

include &lt;span class="k"&gt;$(&lt;/span&gt;CLEAR_VARS&lt;span class="k"&gt;)&lt;/span&gt;

LOCAL_SRC_FILES :&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
        adb.c &lt;span class="se"&gt;\&lt;/span&gt;
        fdevent.c &lt;span class="se"&gt;\&lt;/span&gt;
        fuse_adb_provider.c &lt;span class="se"&gt;\&lt;/span&gt;
        transport.c &lt;span class="se"&gt;\&lt;/span&gt;
        transport_usb.c &lt;span class="se"&gt;\&lt;/span&gt;
        sockets.c &lt;span class="se"&gt;\&lt;/span&gt;
        services.c &lt;span class="se"&gt;\&lt;/span&gt;
        usb_linux_client.c &lt;span class="se"&gt;\&lt;/span&gt;
        utils.c

LOCAL_CFLAGS :&lt;span class="o"&gt;=&lt;/span&gt; -O2 -g -DADB_HOST&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; -Wall -Wno-unused-parameter
LOCAL_CFLAGS +&lt;span class="o"&gt;=&lt;/span&gt; -D_XOPEN_SOURCE -D_GNU_SOURCE
LOCAL_C_INCLUDES +&lt;span class="o"&gt;=&lt;/span&gt; bootable/recovery

LOCAL_MODULE :&lt;span class="o"&gt;=&lt;/span&gt; minadbd
LOCAL_FORCE_STATIC_EXECUTABLE :&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
LOCAL_STATIC_LIBRARIES :&lt;span class="o"&gt;=&lt;/span&gt; libfusesideload libcutils libc libmincrypt

include &lt;span class="k"&gt;$(&lt;/span&gt;BUILD_EXECUTABLE&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;Then, we need to register two new "services" by adding them in the &lt;em&gt;service_to_fd&lt;/em&gt; function:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;service_to_fd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;strncmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"samsung_unlock:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_service_thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;samsung_unlock&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;strncmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"exit"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;samsung_unlock service is used to change the lock status for the download mode, and exit service to kill our minadbd if we want to be able to use adbd for sideloading. Other services have been removed from the &lt;code class="cpp"&gt;&lt;span class="n"&gt;service_to_fd&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/code&gt; function.&lt;/p&gt;
&lt;ol class="arabic simple" start="3"&gt;
&lt;li&gt;Now, we can implement our new service:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;samsung_unlock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;cookie&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strncmp&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;cookie&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"super_s3cr3t_p4ssw0rd!"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;adb_write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"OK4Y"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ln -s /dev/block/mmcblk0p11 /dev/block/param"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"rm /dev/random &amp;amp;&amp;amp; ln -s /dev/urandom /dev/random"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"change_lock_status &amp;amp;&amp;amp; reboot download"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;adb_write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"F4IL"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;adb_close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When you want to change the status of the download mode, you only have to send &lt;code class="cpp"&gt;&lt;span class="nl"&gt;samsung_unlock&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;super_s3cr3t_p4ssw0rd&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;/code&gt; through adb. The &lt;code class="cpp"&gt;&lt;span class="n"&gt;samsung_unlock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/code&gt; function will create two symbolic links and run our binary called &lt;code class="bash"&gt;change_lock_status&lt;/code&gt;.
The &lt;code class="bash"&gt;change_lock_status&lt;/code&gt; binary use &lt;code class="bash"&gt;libSecurityNativeManager.so&lt;/code&gt; through &lt;code class="cpp"&gt;&lt;span class="n"&gt;dlopen&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/code&gt;/&lt;code class="cpp"&gt;&lt;span class="n"&gt;dlsym&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/code&gt; to modify the param partition. As it tries to open &lt;code class="bash"&gt;/dev/block/param&lt;/code&gt; which doesn't exist in the stock recovery, we need to recreate the correct symlink. We also need to remove &lt;code class="bash"&gt;/dev/random&lt;/code&gt; and replace it with &lt;code class="bash"&gt;/dev/urandom&lt;/code&gt; because the &lt;code class="bash"&gt;libSecurityNativeManager.so&lt;/code&gt; tries to read from it and it hangs since there is not enough entropy.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Please note that this code snippet is only a sample of what can be done, it is not recommended to use it on your smartphone as it doesn't implement any protection like anti bruteforce. It's just a PoC.&lt;/em&gt;&lt;/p&gt;
&lt;ol class="arabic simple" start="4"&gt;
&lt;li&gt;Finally, we need to add a main function to our minadbd binary:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;--- a/minadbd/adb.c
+++ b/minadbd/adb.c
@@ -400,3 +400,9 @@ int adb_main&lt;span class="o"&gt;()&lt;/span&gt;

     &lt;span class="k"&gt;return&lt;/span&gt; 0&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="o"&gt;}&lt;/span&gt;
+
+int main&lt;span class="o"&gt;(&lt;/span&gt;int argc, char **argv&lt;span class="o"&gt;)&lt;/span&gt;
+&lt;span class="o"&gt;{&lt;/span&gt;
+    D&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Handling main()\n"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
+    &lt;span class="k"&gt;return&lt;/span&gt; adb_main&lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
+&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let's build it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; ~/aosp/
$ &lt;span class="nb"&gt;source&lt;/span&gt; build/envsetup.sh
$ lunch
$ make minadbd
$ file out/target/product/generic/system/bin/minadbd
out/target/product/generic/system/bin/minadbd: ELF 32-bit LSB executable, ARM, EABI5 version &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;SYSV&lt;span class="o"&gt;)&lt;/span&gt;, statically linked, stripped
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;YAY! Now we need to modify the stock recovery to add our custom minadbd binary:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;First we need to extract the stock recovery from our ROM:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ tar xvf G900FXXU1BNL9_G900FOXX1BNL3_G900FXXU1BNL9_HOME.tar.md5 recovery.img
$ mkboot recovery.img /tmp/out/
Unpack &lt;span class="p"&gt;&amp;amp;&lt;/span&gt; decompress recovery.img to /tmp/out
kernel         : kernel
ramdisk        : ramdisk
page size      : 2048
kernel size    : 8336160
ramdisk size   : 2563133
dtb size       : 1843200
base           : 0x00000000
kernel offset  : 0x00008000
ramdisk offset : 0x02000000
tags offset    : 0x01e00000
dtb img        : dt.img
cmd line       : &lt;span class="nv"&gt;console&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;null androidboot.hardware&lt;span class="o"&gt;=&lt;/span&gt;qcom &lt;span class="nv"&gt;user_debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;23&lt;/span&gt; msm_rtb.filter&lt;span class="o"&gt;=&lt;/span&gt;0x37 ehci-hcd.park&lt;span class="o"&gt;=&lt;/span&gt;3
ramdisk is gzip format.
Unpack completed.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To allow easy unpack/repack of &lt;code class="bash"&gt;recovery.img&lt;/code&gt;, i used mkboot wrapper which can be found on &lt;a class="reference external" href="https://github.com/xiaolu/mkbootimg_tools"&gt;github&lt;/a&gt; .&lt;/p&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;Now we need to add our &lt;code class="bash"&gt;minadbd&lt;/code&gt;, renamed as &lt;code class="bash"&gt;samsung_unlock&lt;/code&gt; below, as a service and start it at boot:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cp out/target/product/generic/system/bin/minadbd /tmp/out/ramdisk/sbin/samsung_unlock
$ nano /tmp/out/ramdisk/init.rc
&lt;span class="o"&gt;[&lt;/span&gt;...&lt;span class="o"&gt;]&lt;/span&gt;
service samsung_unlock /sbin/samsung_unlock --root_seclabel&lt;span class="o"&gt;=&lt;/span&gt;u:r:su:s0
    disabled
    user root
    group root
    oneshot
&lt;span class="o"&gt;[&lt;/span&gt;...&lt;span class="o"&gt;]&lt;/span&gt;
on property:ge0n0sis.samsung_unlock&lt;span class="o"&gt;=&lt;/span&gt;1
    write /sys/class/android_usb/android0/enable 1
    start samsung_unlock
&lt;span class="o"&gt;[&lt;/span&gt;...&lt;span class="o"&gt;]&lt;/span&gt;
$ nano /tmp/out/ramdisk/default.prop
&lt;span class="o"&gt;[&lt;/span&gt;...&lt;span class="o"&gt;]&lt;/span&gt;
ge0n0sis.samsung_unlock&lt;span class="o"&gt;=&lt;/span&gt;1
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="3"&gt;
&lt;li&gt;We also need to add &lt;code class="bash"&gt;change_lock_status&lt;/code&gt; binary in the recovery. It's a dynamically linked ELF binary (because it use &lt;code class="cpp"&gt;&lt;span class="n"&gt;dlopen&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/code&gt;/&lt;code class="cpp"&gt;&lt;span class="n"&gt;dlsym&lt;/span&gt;&lt;/code&gt;), thus we need to also put the linker binary and the dependencies in &lt;code class="cpp"&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;vendor&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;/code&gt; (&lt;code class="cpp"&gt;&lt;span class="n"&gt;libSecurityNativeManager&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;so&lt;/span&gt;&lt;/code&gt; and it's own dependencies):&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;RAMDISK&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/tmp/out/ramdisk
$ cp /tmp/change_lock_status &lt;span class="nv"&gt;$RAMDISK&lt;/span&gt;/sbin/
$ &lt;span class="nb"&gt;cd&lt;/span&gt; ~/aosp/
$ make linker
$ file out/target/product/generic/system/bin/linker
out/target/product/generic/system/bin/linker: ELF 32-bit LSB shared object, ARM, EABI5 version &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;SYSV&lt;span class="o"&gt;)&lt;/span&gt;, dynamically linked, interpreter /system/bin/linker, not stripped
$ cp out/target/product/generic/system/bin/linker &lt;span class="nv"&gt;$RAMDISK&lt;/span&gt;/sbin/
$ sed -i &lt;span class="s2"&gt;"s|/system/bin/linker\x0|/sbin/linker\x0\x0\x0\x0\x0\x0\x0|g"&lt;/span&gt; &lt;span class="nv"&gt;$RAMDISK&lt;/span&gt;/sbin/change_lock_status
$ sed -i &lt;span class="s2"&gt;"s|/system/bin/linker\x0|/sbin/linker\x0\x0\x0\x0\x0\x0\x0|g"&lt;/span&gt; &lt;span class="nv"&gt;$RAMDISK&lt;/span&gt;/sbin/linker
$ mkdir -p &lt;span class="nv"&gt;$RAMDISK&lt;/span&gt;/vendor/lib
$ cp /tmp/libSecurityNativeManager.so &lt;span class="nv"&gt;$RAMDISK&lt;/span&gt;/vendor/lib
$ arm-linux-gnueabi-objdump -x &lt;span class="nv"&gt;$RAMDISK&lt;/span&gt;/sbin/change_lock_status  &lt;span class="p"&gt;|&lt;/span&gt;grep NEEDED
NEEDED               libdl.so
NEEDED               libstdc++.so
NEEDED               libm.so
NEEDED               libc.so
$ arm-linux-gnueabi-objdump -x &lt;span class="nv"&gt;$RAMDISK&lt;/span&gt;/vendor/lib/libSecurityManagerNative.so  &lt;span class="p"&gt;|&lt;/span&gt;grep NEEDED
NEEDED               libcrypto.so
NEEDED               libskmm.so
NEEDED               liblog.so
NEEDED               libstdc++.so
NEEDED               libm.so
NEEDED               libc.so
NEEDED               libdl.so
$ adb pull /system/lib /tmp/lib
$ &lt;span class="k"&gt;for&lt;/span&gt; i in libc.so libcrypto.so libdl.so liblog.so libm.so libskmm.so libstdc++.so&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;
    cp /tmp/lib/&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="nv"&gt;$RAMDISK&lt;/span&gt;/vendor/lib&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="4"&gt;
&lt;li&gt;Our custom recovery is complete. We rebuild it, package it as a .tar.md5 file and flash it with ODIN:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mkboot /tmp/out/ /tmp/recovery.img
$ tar -H ustar -c recovery.img &amp;gt; recovery.tar
$ md5sum -t recovery.tar &amp;gt;&amp;gt; recovery.tar
$ mv recovery.tar recovery.tar.md5
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once flashed, we can reboot the smartphone in recovery mode and check if an adb device is detected:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ adb device
List of devices attached
1e45xxxx    **host**
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Everything seems to be fine, but we still need to send our custom "samsung_unlock" command through adb. To do so, we will use a simple python client instead of modifying adb sources to build a new client supporting our command.&lt;/p&gt;
&lt;p&gt;To communicate with an android USB device through adb, we only need to connect on 127.0.0.1:5037 on which adb server is listening and send "host:transport-usb" command to talk to the USB device. Once done, you can send your own adb services.&lt;/p&gt;
&lt;p&gt;Below is an example of adb client source code to use the samsung_unlock service:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;socket&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;argparse&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;adb_send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;%04x%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;adb_recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;argparse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ArgumentParser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"-p"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"--password"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"unlock_password"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"-x"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"--exit"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"exit"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"store_true"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SOCK_STREAM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s1"&gt;'127.0.0.1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5037&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;adb_send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"host:transport-usb"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;adb_recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;adb_send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"exit"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unlock_password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;adb_send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"unlock_download:"&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;adb_recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;adb_recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"nothing to do ..."&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This article shows how reverse engineering of proprietary parts of Android can sometimes help to discover security features not enabled by default or not available to
an end user. Based on this &lt;a class="reference external" href="https://www.stigviewer.com/stig/samsung_android_with_knox_1.x/2014-04-22/finding/V-48251"&gt;link&lt;/a&gt;, it seems that this feature can be enabled via a MDM interface. It's too bad that Samsung doesn't provide a simple way for its end users to manage the download mode access :(.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The present article was written while the author was affiliated with Quarkslab (www.quarkslab.com). The employer's authorization for publication does not constitute an endorsement of its content and the author remains solely responsible for it.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
</summary><category term="android"></category><category term="bootloader"></category><category term="forensic"></category><category term="samsung"></category><category term="aboot"></category></entry><entry><title>Exploring Android's SELinux Kernel Policy</title><link href="https://ge0n0sis.github.io/posts/2015/12/exploring-androids-selinux-kernel-policy/" rel="alternate"></link><published>2015-12-22T00:00:00+01:00</published><author><name>Fernand LONE SANG</name></author><id>tag:ge0n0sis.github.io,2015-12-22:posts/2015/12/exploring-androids-selinux-kernel-policy/</id><summary type="html">&lt;div class="section" id="introduction"&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Since Android 4.3, SELinux is part of the Security Enhancements for Android and
contributes to the Android security model by enforcing mandatory access control
over all processes and by confining privileged processes besides Linux's native
discretionary access control.&lt;/p&gt;
&lt;p&gt;This article focuses on Android's SELinux kernel policy. I explain in detail
how SELinux statements are transformed into a binary file. I dissect briefly
its file format and, I introduce a proof-of-concept tool I wrote, &lt;a class="reference external" href="https://github.com/ge0n0sis/sedump/"&gt;sedump&lt;/a&gt;, to get back SELinux equivalent
statements from a binary file extracted from an Android ROM for instance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="building-android-sepolicy"&gt;
&lt;h2 id="building-android-sepolicy"&gt;Building Android sepolicy&lt;/h2&gt;
&lt;p&gt;The journey begins with understanding how Android's SELinux kernel policy
is generated. Source files required to build Android's &lt;cite&gt;sepolicy&lt;/cite&gt; can be
downloaded either from the &lt;cite&gt;Android Source Tree&lt;/cite&gt; (&lt;a class="reference external" href="https://android.googlesource.com/platform/external/sepolicy"&gt;external/sepolicy&lt;/a&gt;) or from the
&lt;cite&gt;Security Enhancements (SE) for Android&lt;/cite&gt; repositories (&lt;a class="reference external" href="https://bitbucket.org/seandroid/external-sepolicy/"&gt;external-sepolicy&lt;/a&gt;).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone https://android.googlesource.com/platform/external/sepolicy
$ &lt;span class="nb"&gt;cd&lt;/span&gt; sepolicy
$ ls
access_vectors          bluetoothdomain.te  dnsmasq.te            &lt;span class="o"&gt;[&lt;/span&gt;...&lt;span class="o"&gt;]&lt;/span&gt;
adbd.te                 bluetooth.te        domain_deprecated.te  &lt;span class="o"&gt;[&lt;/span&gt;...&lt;span class="o"&gt;]&lt;/span&gt;
Android.mk              bootanim.te         domain.te             &lt;span class="o"&gt;[&lt;/span&gt;...&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;...&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Like any other Android project, rules to build output files are described
inside a make file named &lt;tt class="docutils literal"&gt;Android.mk&lt;/tt&gt;. Let us dissect that file, especially
rules to build the &lt;code class="bash"&gt;sepolicy&lt;/code&gt; target:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;POLICYVERS ?&lt;span class="o"&gt;=&lt;/span&gt; 29
&lt;span class="o"&gt;[&lt;/span&gt;...&lt;span class="o"&gt;]&lt;/span&gt;
LOCAL_MODULE :&lt;span class="o"&gt;=&lt;/span&gt; sepolicy
LOCAL_MODULE_CLASS :&lt;span class="o"&gt;=&lt;/span&gt; ETC
LOCAL_MODULE_TAGS :&lt;span class="o"&gt;=&lt;/span&gt; optional
LOCAL_MODULE_PATH :&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;TARGET_ROOT_OUT&lt;span class="k"&gt;)&lt;/span&gt;

include &lt;span class="k"&gt;$(&lt;/span&gt;BUILD_SYSTEM&lt;span class="k"&gt;)&lt;/span&gt;/base_rules.mk
sepolicy_policy.conf :&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;intermediates&lt;span class="k"&gt;)&lt;/span&gt;/policy.conf
&lt;span class="o"&gt;[&lt;/span&gt;...&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;$(&lt;/span&gt;LOCAL_BUILT_MODULE&lt;span class="k"&gt;)&lt;/span&gt;: &lt;span class="k"&gt;$(&lt;/span&gt;sepolicy_policy.conf&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;HOST_OUT_EXECUTABLES&lt;span class="k"&gt;)&lt;/span&gt;/checkpolicy
    @mkdir -p &lt;span class="k"&gt;$(&lt;/span&gt;dir &lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;$(&lt;/span&gt;hide&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;HOST_OUT_EXECUTABLES&lt;span class="k"&gt;)&lt;/span&gt;/checkpolicy -M -c &lt;span class="k"&gt;$(&lt;/span&gt;POLICYVERS&lt;span class="k"&gt;)&lt;/span&gt; -o &lt;span class="nv"&gt;$@&lt;/span&gt; $&amp;lt;
    &lt;span class="k"&gt;$(&lt;/span&gt;hide&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;HOST_OUT_EXECUTABLES&lt;span class="k"&gt;)&lt;/span&gt;/checkpolicy -M -c &lt;span class="k"&gt;$(&lt;/span&gt;POLICYVERS&lt;span class="k"&gt;)&lt;/span&gt; -o &lt;span class="se"&gt;\&lt;/span&gt;
        &lt;span class="k"&gt;$(&lt;/span&gt;dir $&amp;lt;&lt;span class="k"&gt;)&lt;/span&gt;/&lt;span class="k"&gt;$(&lt;/span&gt;notdir &lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;.dontaudit $&amp;lt;.dontaudit
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When run, the &lt;code class="bash"&gt;sepolicy&lt;/code&gt; target outputs two files, &lt;tt class="docutils literal"&gt;sepolicy&lt;/tt&gt; and
&lt;tt class="docutils literal"&gt;sepolicy.dontaudit&lt;/tt&gt;, into the &lt;code class="bash"&gt;&lt;span class="k"&gt;$(&lt;/span&gt;intermediates&lt;span class="k"&gt;)&lt;/span&gt;&lt;/code&gt; folder defined by the
Android build system. These two files are generated with &lt;tt class="docutils literal"&gt;checkpolicy&lt;/tt&gt; by
providing respectively &lt;code class="bash"&gt;&lt;span class="k"&gt;$(&lt;/span&gt;sepolicy_policy.conf&lt;span class="k"&gt;)&lt;/span&gt;&lt;/code&gt; and
&lt;code class="bash"&gt;&lt;span class="k"&gt;$(&lt;/span&gt;sepolicy_policy.conf&lt;span class="k"&gt;)&lt;/span&gt;.dontaudit&lt;/code&gt; as input.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;MLS_SENS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1
&lt;span class="nv"&gt;MLS_CATS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1024
&lt;span class="o"&gt;[&lt;/span&gt;...&lt;span class="o"&gt;]&lt;/span&gt;
sepolicy_policy.conf :&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;intermediates&lt;span class="k"&gt;)&lt;/span&gt;/policy.conf
&lt;span class="k"&gt;$(&lt;/span&gt;sepolicy_policy.conf&lt;span class="k"&gt;)&lt;/span&gt;: PRIVATE_MLS_SENS :&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;MLS_SENS&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;$(&lt;/span&gt;sepolicy_policy.conf&lt;span class="k"&gt;)&lt;/span&gt;: PRIVATE_MLS_CATS :&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;MLS_CATS&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;$(&lt;/span&gt;sepolicy_policy.conf&lt;span class="k"&gt;)&lt;/span&gt;: PRIVATE_ADDITIONAL_M4DEFS :&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;LOCAL_ADDITIONAL_M4DEFS&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;$(&lt;/span&gt;sepolicy_policy.conf&lt;span class="k"&gt;)&lt;/span&gt;: &lt;span class="k"&gt;$(&lt;/span&gt;call build_policy, &lt;span class="k"&gt;$(&lt;/span&gt;sepolicy_build_files&lt;span class="k"&gt;))&lt;/span&gt;
    @mkdir -p &lt;span class="k"&gt;$(&lt;/span&gt;dir &lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;$(&lt;/span&gt;hide&lt;span class="k"&gt;)&lt;/span&gt; m4 &lt;span class="k"&gt;$(&lt;/span&gt;PRIVATE_ADDITIONAL_M4DEFS&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
        -D &lt;span class="nv"&gt;mls_num_sens&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;PRIVATE_MLS_SENS&lt;span class="k"&gt;)&lt;/span&gt; -D &lt;span class="nv"&gt;mls_num_cats&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;PRIVATE_MLS_CATS&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
        -D &lt;span class="nv"&gt;target_build_variant&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;TARGET_BUILD_VARIANT&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
        -s $^ &amp;gt; &lt;span class="nv"&gt;$@&lt;/span&gt;
    &lt;span class="k"&gt;$(&lt;/span&gt;hide&lt;span class="k"&gt;)&lt;/span&gt; sed &lt;span class="s1"&gt;'/dontaudit/d'&lt;/span&gt; &lt;span class="nv"&gt;$@&lt;/span&gt; &amp;gt; &lt;span class="nv"&gt;$@&lt;/span&gt;.dontaudit
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code class="bash"&gt;sepolicy_policy.conf&lt;/code&gt; target outputs two files,
&lt;code class="bash"&gt;&lt;span class="k"&gt;$(&lt;/span&gt;intermediates&lt;span class="k"&gt;)&lt;/span&gt;/policy.conf&lt;/code&gt; and &lt;code class="bash"&gt;&lt;span class="k"&gt;$(&lt;/span&gt;intermediates&lt;span class="k"&gt;)&lt;/span&gt;/policy.conf.dontaudit&lt;/code&gt;.
The general-purpose macro processor M4 expands files listed in the
&lt;code class="bash"&gt;&lt;span class="k"&gt;$(&lt;/span&gt;sepolicy_build_files&lt;span class="k"&gt;)&lt;/span&gt;&lt;/code&gt; variable in order to generate &lt;tt class="docutils literal"&gt;policy.conf&lt;/tt&gt; and
its stripped off version &lt;tt class="docutils literal"&gt;policy.conf.dontaudit&lt;/tt&gt;.
&lt;code class="bash"&gt;&lt;span class="k"&gt;$(&lt;/span&gt;sepolicy_build_files&lt;span class="k"&gt;)&lt;/span&gt;&lt;/code&gt; simply lists all source files required to build the
Android SELinux kernel policy:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sepolicy_build_files :&lt;span class="o"&gt;=&lt;/span&gt; security_classes initial_sids access_vectors &lt;span class="se"&gt;\&lt;/span&gt;
    global_macros neverallow_macros mls_macros mls policy_capabilities &lt;span class="se"&gt;\&lt;/span&gt;
    te_macros attributes ioctl_macros *.te roles users initial_sid_contexts &lt;span class="se"&gt;\&lt;/span&gt;
    fs_use genfs_contexts port_contexts
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let us precise that this file list can be overriden with board specific files
while executing &lt;code class="bash"&gt;&lt;span class="k"&gt;$(&lt;/span&gt;call build_policy, &lt;span class="k"&gt;$(&lt;/span&gt;sepolicy_build_files&lt;span class="k"&gt;))&lt;/span&gt;&lt;/code&gt;. This is
an expected behaviour in Android build system when defining &lt;code class="bash"&gt;BOARD_SEPOLICY_*&lt;/code&gt;
variables.&lt;/p&gt;
&lt;p&gt;All the brick put back together, one can generate easily a &lt;tt class="docutils literal"&gt;sepolicy&lt;/tt&gt; file outside
of Android build system. &lt;tt class="docutils literal"&gt;checkpolicy&lt;/tt&gt; is not an android-specific tool, thus
one provided with the &lt;a class="reference external" href="https://github.com/TresysTechnology/setools3"&gt;setools&lt;/a&gt;
package in your default Linux distribution should be enough:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt-get install m4 setools
$ m4 -D &lt;span class="nv"&gt;mls_num_sens&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; -D &lt;span class="nv"&gt;mls_num_cats&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1024&lt;/span&gt; -D &lt;span class="nv"&gt;target_build_variant&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;user &lt;span class="se"&gt;\&lt;/span&gt;
     -s security_classes initial_sids access_vectors global_macros &lt;span class="se"&gt;\&lt;/span&gt;
        neverallow_macros mls_macros mls policy_capabilities te_macros &lt;span class="se"&gt;\&lt;/span&gt;
        attributes ioctl_macros *.te roles users initial_sid_contexts &lt;span class="se"&gt;\&lt;/span&gt;
        fs_use genfs_contexts port_contexts &amp;gt; policy.conf
$ checkpolicy -h
usage:  checkpolicy &lt;span class="o"&gt;[&lt;/span&gt;-b&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;-d&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;-U handle_unknown &lt;span class="o"&gt;(&lt;/span&gt;allow,deny,reject&lt;span class="o"&gt;)]&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
                    &lt;span class="o"&gt;[&lt;/span&gt;-M&lt;span class="o"&gt;][&lt;/span&gt;-c policyvers &lt;span class="o"&gt;(&lt;/span&gt;15-29&lt;span class="o"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;-o output_file&lt;span class="o"&gt;]&lt;/span&gt;      &lt;span class="se"&gt;\&lt;/span&gt;
                    &lt;span class="o"&gt;[&lt;/span&gt;-t target_platform &lt;span class="o"&gt;(&lt;/span&gt;selinux,xen&lt;span class="o"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;input_file&lt;span class="o"&gt;]&lt;/span&gt;
$ checkpolicy -M -c &lt;span class="m"&gt;29&lt;/span&gt; -o sepolicy policy.conf
checkpolicy:  loading policy configuration from policy.conf
checkpolicy:  policy configuration loaded
checkpolicy:  writing binary representation &lt;span class="o"&gt;(&lt;/span&gt;version 29&lt;span class="o"&gt;)&lt;/span&gt; to sepolicy
$ file sepolicy
sepolicy: SE Linux policy v29 MLS &lt;span class="m"&gt;8&lt;/span&gt; symbols &lt;span class="m"&gt;7&lt;/span&gt; ocons
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;checkpolicy&lt;/tt&gt; accepts numerous options. The &lt;code class="bash"&gt;-M&lt;/code&gt; option is a flag to
indicate that the compiled policy should embed multi-level security
statements and the &lt;code class="bash"&gt;-c&lt;/code&gt; specifies the policy version.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="understanding-the-selinux-kernel-policy-file-format"&gt;
&lt;h2 id="understanding-the-selinux-kernel-policy-file-format"&gt;Understanding the SELinux Kernel Policy File Format&lt;/h2&gt;
&lt;p&gt;Let us dig the subject deeper by understanding how the SELinux textual
statements are transformed into a binary kernel policy. Unfortunately for us,
the SELinux kernel policy file format is not documented, probably because it is
a complex format which depends heavily on the policy version.&lt;/p&gt;
&lt;p&gt;The main entry point for &lt;a class="reference external" href="http://androidxref.com/6.0.0_r1/xref/external/selinux/checkpolicy/"&gt;checkpolicy&lt;/a&gt; is
located in &lt;a class="reference external" href="http://androidxref.com/6.0.0_r1/xref/external/selinux/checkpolicy/checkpolicy.c"&gt;checkpolicy.c&lt;/a&gt;.
In a few words, a SELinux policy is represented in memory by a &lt;code class="cpp"&gt;&lt;span class="n"&gt;policydb_t&lt;/span&gt;&lt;/code&gt; data
structure. It is zeroed and initialized by the &lt;a class="reference external" href="http://androidxref.com/6.0.0_r1/xref/external/selinux/checkpolicy/checkpolicy.c#571"&gt;policydb_init()&lt;/a&gt;
method, and its members are set while parsing SELinux statements using LEX and
YACC (&lt;a class="reference external" href="http://androidxref.com/6.0.0_r1/xref/external/selinux/checkpolicy/policy_scan.l"&gt;policy_scan.l&lt;/a&gt;
and &lt;a class="reference external" href="http://androidxref.com/6.0.0_r1/xref/external/selinux/checkpolicy/policy_parse.y"&gt;policy_parse.y&lt;/a&gt;)
in &lt;a class="reference external" href="http://androidxref.com/6.0.0_r1/xref/external/selinux/checkpolicy/checkpolicy.c#583"&gt;read_source_policy()&lt;/a&gt;.
Once fully parsed, &lt;tt class="docutils literal"&gt;checkpolicy&lt;/tt&gt; outputs the resulting SELinux kernel policy
binary to the path specified in the command line. The method &lt;a class="reference external" href="http://androidxref.com/6.0.0_r1/xref/external/selinux/checkpolicy/checkpolicy.c#632"&gt;policydb_write()&lt;/a&gt;
is in charge of writing a &lt;code class="cpp"&gt;&lt;span class="n"&gt;policydb_t&lt;/span&gt;&lt;/code&gt; on the disk.&lt;/p&gt;
&lt;p&gt;I deliberately skip the parsing of the SELinux statement and I assume that the
policy has been loaded and the &lt;code class="cpp"&gt;&lt;span class="n"&gt;policydb_t&lt;/span&gt;&lt;/code&gt; data structure is ready to be
written on the disk. The following listing handles writing the binary policy on
the disk:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;policy_file&lt;/span&gt; &lt;span class="n"&gt;pf&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;[...]&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outfile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;outfp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outfile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"w"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;[...]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;cil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%s:  writing binary representation (version %d) to %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
               &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;policyvers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;outfile&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;policydb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;policy_type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;POLICY_KERN&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="n"&gt;policy_file_init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;pf&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;pf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PF_USE_STDIO&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;pf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;outfp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;policydb_write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;policydb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;pf&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;[...]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;[...]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;fclose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outfp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class="cpp"&gt;&lt;span class="n"&gt;policydb_write&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/code&gt; expects two arguments: a reference to a
&lt;code class="cpp"&gt;&lt;span class="n"&gt;policydb_t&lt;/span&gt;&lt;/code&gt; data structure and a reference to a &lt;code class="cpp"&gt;&lt;span class="k"&gt;struct&lt;/span&gt;
&lt;span class="n"&gt;policy_file&lt;/span&gt;&lt;/code&gt;. The later is an abstration layer for possible input or output
formats (memory-mapped memory or basic I/O). The &lt;code class="cpp"&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;policy_file&lt;/span&gt;&lt;/code&gt; is
defined as follows in &lt;a class="reference external" href="http://androidxref.com/6.0.0_r1/xref/external/selinux/libsepol/include/sepol/policydb/policydb.h#664"&gt;libsepol&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/* A policy "file" may be a memory region referenced by a (data, len) pair&lt;/span&gt;
&lt;span class="cm"&gt;   or a file referenced by a FILE pointer. */&lt;/span&gt;
&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;policy_file&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="cp"&gt;#define PF_USE_MEMORY  0&lt;/span&gt;
&lt;span class="cp"&gt;#define PF_USE_STDIO   1&lt;/span&gt;
&lt;span class="cp"&gt;#define PF_LEN         2 &lt;/span&gt;&lt;span class="cm"&gt;/* total up length in len field */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;FILE&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;sepol_handle&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;policy_file_t&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let us focus now on &lt;code class="cpp"&gt;&lt;span class="n"&gt;policydb_write&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/code&gt; (defined in &lt;a class="reference external" href="http://androidxref.com/6.0.0_r0/xref/external/selinux/libsepol/src/write.c#1942"&gt;libsepol/src/write.c&lt;/a&gt;)
to understand the format of the binary policy. SELinux policies can be
defined via a SELinux kernel policy or a SELinux module policy: as we are
only interested in SELinux kernel policies, one can focus only on code
path satisfying &lt;code class="cpp"&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;policy_type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;POLICY_KERN&lt;/span&gt;&lt;/code&gt; in the source code.&lt;/p&gt;
&lt;p&gt;&lt;code class="cpp"&gt;&lt;span class="n"&gt;policydb_write&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/code&gt; begins an SELinux kernel policy binary with a &lt;em&gt;magic&lt;/em&gt;
number that holds the type of policy. It writes then information related to
policy compatibility: the &lt;em&gt;length&lt;/em&gt; of a standardized string identifier and the
&lt;em&gt;string identifier&lt;/em&gt; itself ("SE Linux" or "XenFlask" or "SELinux Module"), the
&lt;em&gt;policy version&lt;/em&gt; number, the &lt;em&gt;configuration&lt;/em&gt; (e.g, MLS policy or not), the
&lt;em&gt;symbol array&lt;/em&gt; and &lt;em&gt;object context array&lt;/em&gt; sizes. To illustrate the file format,
I wrote an incomplete 010Editor template that parses the SELinux kernel policy
header.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cat&lt;/span&gt; &lt;span class="n"&gt;SELinux&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bt&lt;/span&gt;
&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;enum&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;uint&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;MLS&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;CONFIG&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;uint&lt;/span&gt; &lt;span class="n"&gt;magic&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;hex&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 0xf97cff8c (SELINUX_MAGIC) or 0xf97cff8d (SELINUX_MOD_MAGIC)&lt;/span&gt;
    &lt;span class="n"&gt;uint&lt;/span&gt; &lt;span class="n"&gt;target_len&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target_len&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;uchar&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;target_len&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="c1"&gt;// "SE Linux" or "XenFlask" or "SELinux Module"&lt;/span&gt;
    &lt;span class="n"&gt;uint&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;CONFIG&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;uint&lt;/span&gt; &lt;span class="n"&gt;sym_num&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;uint&lt;/span&gt; &lt;span class="n"&gt;ocon_num&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;SELinuxPolicyHeader&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;SELinuxPolicyHeader&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;SELinuxPolicy&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;LittleEndian&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;FEof&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;SELinuxPolicy&lt;/span&gt; &lt;span class="n"&gt;policy&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;Warning&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Incomplete template, stopped."&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using &lt;a class="reference external" href="https://github.com/d0c-s4vage/pfp"&gt;Python format parser (pfp)&lt;/a&gt;, one
can dissect an &lt;tt class="docutils literal"&gt;sepolicy&lt;/tt&gt; header with the above mentionned template. As
expected, we manage to retrieve the same piece of information as &lt;tt class="docutils literal"&gt;file&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cat pfp-parse.py
import sys, pfp

&lt;span class="nv"&gt;dom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; pfp.parse&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;data_file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;sys.argv&lt;span class="o"&gt;[&lt;/span&gt;1&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="nv"&gt;template_file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;sys.argv&lt;span class="o"&gt;[&lt;/span&gt;2&lt;span class="o"&gt;])&lt;/span&gt;
print&lt;span class="o"&gt;(&lt;/span&gt;dom._pfp__show&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;include_offset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;True&lt;span class="o"&gt;))&lt;/span&gt;
$ python fpf-parse.py sepolicy SELinuxPolicy.bt
&lt;span class="m"&gt;0000&lt;/span&gt; struct &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="m"&gt;0000&lt;/span&gt; &lt;span class="nv"&gt;policy&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0000&lt;/span&gt; struct &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="m"&gt;0000&lt;/span&gt; &lt;span class="nv"&gt;header&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0000&lt;/span&gt; struct &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="m"&gt;0000&lt;/span&gt; &lt;span class="nv"&gt;magic&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; UInt&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4185718668&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;f97cff8c&lt;span class="o"&gt;])&lt;/span&gt;
            &lt;span class="m"&gt;0004&lt;/span&gt; &lt;span class="nv"&gt;target_len&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; UInt&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;00000008&lt;span class="o"&gt;])&lt;/span&gt;
            &lt;span class="m"&gt;0008&lt;/span&gt; &lt;span class="nv"&gt;target&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; UChar&lt;span class="o"&gt;[&lt;/span&gt;8&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'SE Linux'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
            &lt;span class="m"&gt;0010&lt;/span&gt; &lt;span class="nv"&gt;version&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; UInt&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;29&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;0000001d&lt;span class="o"&gt;])&lt;/span&gt;
            &lt;span class="m"&gt;0014&lt;/span&gt; &lt;span class="nv"&gt;config&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; Enum&amp;lt;UInt&amp;gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;00000001&lt;span class="o"&gt;])(&lt;/span&gt;MLS&lt;span class="o"&gt;)&lt;/span&gt;
            &lt;span class="m"&gt;0018&lt;/span&gt; &lt;span class="nv"&gt;sym_num&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; UInt&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;00000008&lt;span class="o"&gt;])&lt;/span&gt;
            001c &lt;span class="nv"&gt;ocon_num&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; UInt&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;00000007&lt;span class="o"&gt;])&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
$ file sepolicy
sepolicy: SE Linux policy v29 MLS &lt;span class="m"&gt;8&lt;/span&gt; symbols &lt;span class="m"&gt;7&lt;/span&gt; ocons
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The SELinux kernel policy header is followed by two serialized &lt;code class="cpp"&gt;&lt;span class="n"&gt;ebitmap_t&lt;/span&gt;&lt;/code&gt;
(&lt;a class="reference external" href="http://androidxref.com/6.0.0_r1/xref/external/selinux/libsepol/src/ebitmap.c"&gt;libsepol/ebitmap.c&lt;/a&gt;):
on that stores &lt;code&gt;polcap&lt;/code&gt; statements and another one for &lt;code&gt;permissive&lt;/code&gt;
statements. To output these bitmaps, the template has been updated with the
following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cat SELinuxPolicy.bt
&lt;span class="o"&gt;[&lt;/span&gt;...&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt; SELinuxPolicyHeader&lt;span class="p"&gt;;&lt;/span&gt;

typedef struct &lt;span class="o"&gt;{&lt;/span&gt;
    uint   start&lt;span class="p"&gt;;&lt;/span&gt;
    uint64 bits&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt; BITMAP&lt;span class="p"&gt;;&lt;/span&gt;

typedef struct &lt;span class="o"&gt;{&lt;/span&gt;
    uint size&lt;span class="p"&gt;;&lt;/span&gt;
    uint highbit&lt;span class="p"&gt;;&lt;/span&gt;
    uint count&lt;span class="p"&gt;;&lt;/span&gt;
    BITMAP node&lt;span class="o"&gt;[&lt;/span&gt;count&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt; SELinuxPolicyEBitmap&lt;span class="p"&gt;;&lt;/span&gt;

typedef struct &lt;span class="o"&gt;{&lt;/span&gt;
    SELinuxPolicyHeader  header&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;header.version &amp;gt;&lt;span class="o"&gt;=&lt;/span&gt; 22&lt;span class="o"&gt;)&lt;/span&gt;
        SELinuxPolicyEBitmap polcap&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;header.version &amp;gt;&lt;span class="o"&gt;=&lt;/span&gt; 23&lt;span class="o"&gt;)&lt;/span&gt;
        SELinuxPolicyEBitmap permissive&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt; SELinuxPolicy&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;...&lt;span class="o"&gt;]&lt;/span&gt;
$ python fpf-parse.py sepolicy SELinuxPolicy.bt
&lt;span class="m"&gt;0000&lt;/span&gt; struct &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="m"&gt;0000&lt;/span&gt; &lt;span class="nv"&gt;policy&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0000&lt;/span&gt; struct &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="o"&gt;[&lt;/span&gt;...&lt;span class="o"&gt;]&lt;/span&gt;
        &lt;span class="m"&gt;0020&lt;/span&gt; &lt;span class="nv"&gt;polcap&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0020&lt;/span&gt; struct &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="m"&gt;0020&lt;/span&gt; &lt;span class="nv"&gt;size&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt; UInt&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;64&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;00000040&lt;span class="o"&gt;])&lt;/span&gt;
            &lt;span class="m"&gt;0024&lt;/span&gt; &lt;span class="nv"&gt;highbit&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; UInt&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;64&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;00000040&lt;span class="o"&gt;])&lt;/span&gt;
            &lt;span class="m"&gt;0028&lt;/span&gt; &lt;span class="nv"&gt;count&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; UInt&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;00000001&lt;span class="o"&gt;])&lt;/span&gt;
            002c &lt;span class="nv"&gt;node&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt; BITMAP&lt;span class="o"&gt;[&lt;/span&gt;1&lt;span class="o"&gt;]&lt;/span&gt;
                002c node&lt;span class="o"&gt;[&lt;/span&gt;0&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 002c struct &lt;span class="o"&gt;{&lt;/span&gt;
                        002c &lt;span class="nv"&gt;start&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; UInt&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;00000000&lt;span class="o"&gt;])&lt;/span&gt;
                        &lt;span class="m"&gt;0030&lt;/span&gt; &lt;span class="nv"&gt;bits&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt; UInt64&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;0000000000000003&lt;span class="o"&gt;])&lt;/span&gt;
                    &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="m"&gt;0038&lt;/span&gt; &lt;span class="nv"&gt;permissive&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0038&lt;/span&gt; struct &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="m"&gt;0038&lt;/span&gt; &lt;span class="nv"&gt;size&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt; UInt&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;64&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;00000040&lt;span class="o"&gt;])&lt;/span&gt;
            003c &lt;span class="nv"&gt;highbit&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; UInt&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;00000000&lt;span class="o"&gt;])&lt;/span&gt;
            &lt;span class="m"&gt;0040&lt;/span&gt; &lt;span class="nv"&gt;count&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; UInt&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;00000000&lt;span class="o"&gt;])&lt;/span&gt;
            &lt;span class="m"&gt;0044&lt;/span&gt; &lt;span class="nv"&gt;node&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt; BITMAP&lt;span class="o"&gt;[&lt;/span&gt;0&lt;span class="o"&gt;]&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In AOSP, &lt;cite&gt;policycap&lt;/cite&gt; statements are defined in &lt;a class="reference external" href="https://android.googlesource.com/platform/external/sepolicy/+/master/policy_capabilities"&gt;policy_capabilities&lt;/a&gt;.
There are two policy capability defined, &lt;code&gt;network_peer_controls&lt;/code&gt; and
&lt;code&gt;open_perms&lt;/code&gt;, which is consistent with the above displayed bitmap and the
meaning of each bit defined in &lt;a class="reference external" href="http://androidxref.com/6.0.0_r1/xref/external/selinux/libsepol/src/polcaps.c#16"&gt;libsepol/polcaps.c&lt;/a&gt;.
Furthermore, no permissive type is defined in the AOSP SELinux configuration
which likely explain the empty bitmap for &lt;tt class="docutils literal"&gt;permissive&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Unfortunately, the remaining SELinux kernel policy is a bit tedious to explain
as there are many data structures involved and to serialize:
&lt;code class="cpp"&gt;&lt;span class="n"&gt;policydb_write&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/code&gt; outputs identifiers declarations (common, types,
attributes, etc.) and the defined access vector rules (allow, deny, dontaudit,
etc. rules.). Let us detail the serialization of common permission sets.&lt;/p&gt;
&lt;p&gt;Common permission sets are stored in the &lt;code class="cpp"&gt;&lt;span class="n"&gt;policydb_t&lt;/span&gt;&lt;/code&gt; data structure in
the &lt;code class="cpp"&gt;&lt;span class="n"&gt;symtable&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;table&lt;/span&gt;&lt;/code&gt; field. It is a hash table with the common
permission set identifier as key and a reference to a &lt;code class="cpp"&gt;&lt;span class="n"&gt;common_datum_t&lt;/span&gt;&lt;/code&gt; as
value. The latter is a structure with a &lt;code class="cpp"&gt;&lt;span class="n"&gt;datum_t&lt;/span&gt;&lt;/code&gt; (i.e., index) and an
hash table listing the permission associated with the common identifier. All
these structures are defined in &lt;a class="reference external" href="http://androidxref.com/6.0.0_r1/xref/external/selinux/libsepol/include/sepol/policydb/policydb.h#106"&gt;libsepol/sepol/policydb/policydb.h&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In &lt;tt class="docutils literal"&gt;libsepol&lt;/tt&gt;, &lt;code class="cpp"&gt;&lt;span class="n"&gt;hashtab_t&lt;/span&gt;&lt;/code&gt; hash tables are all serialized in the same
way. The serialized structure contains a &lt;code class="cpp"&gt;&lt;span class="n"&gt;nprim&lt;/span&gt;&lt;/code&gt; member, keys and values
of the hash table and additionnally &lt;code class="cpp"&gt;&lt;span class="n"&gt;nelem&lt;/span&gt;&lt;/code&gt;, representing the number of
elements stored in the hash table. These members can be found in the serialized
&lt;code class="cpp"&gt;&lt;span class="n"&gt;symtable&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;table&lt;/span&gt;&lt;/code&gt; and &lt;code class="cpp"&gt;&lt;span class="n"&gt;common_datum_t&lt;/span&gt;&lt;/code&gt;. As for strings identifiers,
they are simply serialized with the string itself and its length. Here is an
updated template to parse the common permission group:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cat SELinuxPolicy.bt
&lt;span class="o"&gt;[&lt;/span&gt;...&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt; SELinuxPolicyEBitmap&lt;span class="p"&gt;;&lt;/span&gt;

typedef struct &lt;span class="o"&gt;{&lt;/span&gt;
    uint len&lt;span class="p"&gt;;&lt;/span&gt;
    uint datum&lt;span class="p"&gt;;&lt;/span&gt;
    uchar identifier&lt;span class="o"&gt;[&lt;/span&gt;len&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt; PERMISSION&lt;span class="p"&gt;;&lt;/span&gt;

typedef struct &lt;span class="o"&gt;{&lt;/span&gt;
    uint len&lt;span class="p"&gt;;&lt;/span&gt;
    uint datum&lt;span class="p"&gt;;&lt;/span&gt;
    uint perm_nprim&lt;span class="p"&gt;;&lt;/span&gt;
    uint perm_nelem&lt;span class="p"&gt;;&lt;/span&gt;
    uchar identifier&lt;span class="o"&gt;[&lt;/span&gt;len&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    PERMISSION permission&lt;span class="o"&gt;[&lt;/span&gt;perm_nelem&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt; COMMON&lt;span class="p"&gt;;&lt;/span&gt;

typedef struct &lt;span class="o"&gt;{&lt;/span&gt;
    uint nprim&lt;span class="p"&gt;;&lt;/span&gt;
    uint nelem&lt;span class="p"&gt;;&lt;/span&gt;
    switch &lt;span class="o"&gt;(&lt;/span&gt;i&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; 0: // common statements
            COMMON common&lt;span class="o"&gt;[&lt;/span&gt;nelem&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        default: // not handled yet
            &lt;span class="k"&gt;return&lt;/span&gt; -1&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt; SYMBOL&lt;span class="p"&gt;;&lt;/span&gt;

typedef struct &lt;span class="o"&gt;{&lt;/span&gt;
    SELinuxPolicyHeader  header&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;header.version &amp;gt;&lt;span class="o"&gt;=&lt;/span&gt; 22&lt;span class="o"&gt;)&lt;/span&gt;
        SELinuxPolicyEBitmap polcap&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;header.version &amp;gt;&lt;span class="o"&gt;=&lt;/span&gt; 23&lt;span class="o"&gt;)&lt;/span&gt;
        SELinuxPolicyEBitmap permissive&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;local&lt;/span&gt; int &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 0&lt;span class="p"&gt;;&lt;/span&gt; i &amp;lt; header.sym_num&lt;span class="p"&gt;;&lt;/span&gt; i++&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        SYMBOL symbol&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt; SELinuxPolicy&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;...&lt;span class="o"&gt;]&lt;/span&gt;
$ python fpf-parse.py sepolicy SELinuxPolicy.bt
&lt;span class="m"&gt;0000&lt;/span&gt; struct &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="m"&gt;0000&lt;/span&gt; &lt;span class="nv"&gt;policy&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0000&lt;/span&gt; struct &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="o"&gt;[&lt;/span&gt;...&lt;span class="o"&gt;]&lt;/span&gt;
        &lt;span class="m"&gt;0044&lt;/span&gt; &lt;span class="nv"&gt;symbol&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0044&lt;/span&gt; struct &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="m"&gt;0044&lt;/span&gt; &lt;span class="nv"&gt;nprim&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; UInt&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;00000003&lt;span class="o"&gt;])&lt;/span&gt;
            &lt;span class="m"&gt;0048&lt;/span&gt; &lt;span class="nv"&gt;nelem&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; UInt&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;00000003&lt;span class="o"&gt;])&lt;/span&gt;
            004c &lt;span class="nv"&gt;common&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; COMMON&lt;span class="o"&gt;[&lt;/span&gt;3&lt;span class="o"&gt;]&lt;/span&gt;
                004c common&lt;span class="o"&gt;[&lt;/span&gt;0&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 004c struct &lt;span class="o"&gt;{&lt;/span&gt;
                        004c &lt;span class="nv"&gt;len&lt;/span&gt;        &lt;span class="o"&gt;=&lt;/span&gt; UInt&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;00000006&lt;span class="o"&gt;])&lt;/span&gt;
                        &lt;span class="m"&gt;0050&lt;/span&gt; &lt;span class="nv"&gt;datum&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; UInt&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;00000002&lt;span class="o"&gt;])&lt;/span&gt;
                        &lt;span class="m"&gt;0054&lt;/span&gt; &lt;span class="nv"&gt;perm_nprim&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; UInt&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;22&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;00000016&lt;span class="o"&gt;])&lt;/span&gt;
                        &lt;span class="m"&gt;0058&lt;/span&gt; &lt;span class="nv"&gt;perm_nelem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; UInt&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;22&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;00000016&lt;span class="o"&gt;])&lt;/span&gt;
                        005c &lt;span class="nv"&gt;identifier&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; UChar&lt;span class="o"&gt;[&lt;/span&gt;6&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'socket'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                        &lt;span class="m"&gt;0062&lt;/span&gt; &lt;span class="nv"&gt;permission&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; PERMISSION&lt;span class="o"&gt;[&lt;/span&gt;22&lt;span class="o"&gt;]&lt;/span&gt;
                            &lt;span class="m"&gt;0062&lt;/span&gt; permission&lt;span class="o"&gt;[&lt;/span&gt;0&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0062&lt;/span&gt; struct &lt;span class="o"&gt;{&lt;/span&gt;
                                    &lt;span class="m"&gt;0062&lt;/span&gt; &lt;span class="nv"&gt;len&lt;/span&gt;        &lt;span class="o"&gt;=&lt;/span&gt; UInt&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;00000006&lt;span class="o"&gt;])&lt;/span&gt;
                                    &lt;span class="m"&gt;0066&lt;/span&gt; &lt;span class="nv"&gt;datum&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; UInt&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;0000000a&lt;span class="o"&gt;])&lt;/span&gt;
                                    006a &lt;span class="nv"&gt;identifier&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; UChar&lt;span class="o"&gt;[&lt;/span&gt;6&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'append'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                                &lt;span class="o"&gt;}&lt;/span&gt;
                            &lt;span class="m"&gt;0070&lt;/span&gt; permission&lt;span class="o"&gt;[&lt;/span&gt;1&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0070&lt;/span&gt; struct &lt;span class="o"&gt;{&lt;/span&gt;
                                    &lt;span class="m"&gt;0070&lt;/span&gt; &lt;span class="nv"&gt;len&lt;/span&gt;        &lt;span class="o"&gt;=&lt;/span&gt; UInt&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;00000004&lt;span class="o"&gt;])&lt;/span&gt;
                                    &lt;span class="m"&gt;0074&lt;/span&gt; &lt;span class="nv"&gt;datum&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; UInt&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;11&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;0000000b&lt;span class="o"&gt;])&lt;/span&gt;
                                    &lt;span class="m"&gt;0078&lt;/span&gt; &lt;span class="nv"&gt;identifier&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; UChar&lt;span class="o"&gt;[&lt;/span&gt;4&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'bind'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                                &lt;span class="o"&gt;}&lt;/span&gt;
                            007c permission&lt;span class="o"&gt;[&lt;/span&gt;2&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 007c struct &lt;span class="o"&gt;{&lt;/span&gt;
                                    007c &lt;span class="nv"&gt;len&lt;/span&gt;        &lt;span class="o"&gt;=&lt;/span&gt; UInt&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;00000007&lt;span class="o"&gt;])&lt;/span&gt;
                                    &lt;span class="m"&gt;0080&lt;/span&gt; &lt;span class="nv"&gt;datum&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; UInt&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;12&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;0000000c&lt;span class="o"&gt;])&lt;/span&gt;
                                    &lt;span class="m"&gt;0084&lt;/span&gt; &lt;span class="nv"&gt;identifier&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; UChar&lt;span class="o"&gt;[&lt;/span&gt;7&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'connect'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                                &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;[&lt;/span&gt;...&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As the process is slightly the same for the other statements, I will leave to
the curious reader the decoding of the remaining binary as an exercise.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="dumping-sepolicy-back-to-policy-conf"&gt;
&lt;h2 id="dumping-sepolicy-back-to-policyconf"&gt;Dumping sepolicy back to policy.conf&lt;/h2&gt;
&lt;p&gt;So far, I assumed that one had the source code to build the &lt;tt class="docutils literal"&gt;sepolicy&lt;/tt&gt; file.
Unfortunately, real life is far from being that easy and all you have, when
analyzing an Android system, is a binary SELinux kernel policy file.
Furthermore, this policy file is rarely the one from AOSP as manufacturers may
add (and they generally do!) a new set of rules to reduce the
attack surface on the services they added.&lt;/p&gt;
&lt;p&gt;In order to audit SELinux statements, most of the time, one have to extract
information from the binary policy file using &lt;a class="reference external" href="https://github.com/TresysTechnology/setools3"&gt;setools3 utilities (apol,
sesearch, seinfo, sediff, etc.)&lt;/a&gt; for
instance. That work is particularly tedious as these tools output only a
fragment of the &lt;tt class="docutils literal"&gt;sepolicy&lt;/tt&gt; file at a time and one may have to juggle with
multiple tools to get an information of the binary file.&lt;/p&gt;
&lt;p&gt;To my surprise and to my knowledge, no tool exists to extract a compilable
&lt;tt class="docutils literal"&gt;policy.conf&lt;/tt&gt; file from a &lt;tt class="docutils literal"&gt;sepolicy&lt;/tt&gt; binary &lt;a class="footnote-reference" href="#id3" id="id2"&gt;[1]&lt;/a&gt;. However, as we have just seen
in the previous section, the SELinux kernel policy is simply a serialized
version of a &lt;tt class="docutils literal"&gt;policydb_t&lt;/tt&gt; structure, built from parsing the &lt;tt class="docutils literal"&gt;policy.conf&lt;/tt&gt;
file.  Moreover, &lt;tt class="docutils literal"&gt;checkpolicy&lt;/tt&gt; is able produce a semantically equivalent
binary kernel policy (see &lt;code class="bash"&gt;-b&lt;/code&gt; option) from a compiled kernel policy.
Thus, it should be possible to deserialize an &lt;tt class="docutils literal"&gt;sepolicy&lt;/tt&gt; binary and get back
a &lt;tt class="docutils literal"&gt;policy.conf&lt;/tt&gt; file equivalent to the original one.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ checkpolicy -b -M -c &lt;span class="m"&gt;29&lt;/span&gt; -o sepolicy.new sepolicy
checkpolicy:  loading policy configuration from sepolicy
libsepol.policydb_index_others: security:  &lt;span class="m"&gt;1&lt;/span&gt; users, &lt;span class="m"&gt;2&lt;/span&gt; roles, &lt;span class="m"&gt;534&lt;/span&gt; types, &lt;span class="m"&gt;0&lt;/span&gt; bools
libsepol.policydb_index_others: security:  &lt;span class="m"&gt;1&lt;/span&gt; sens, &lt;span class="m"&gt;1024&lt;/span&gt; cats
libsepol.policydb_index_others: security:  &lt;span class="m"&gt;55&lt;/span&gt; classes, &lt;span class="m"&gt;4473&lt;/span&gt; rules, &lt;span class="m"&gt;0&lt;/span&gt; cond rules
checkpolicy:  policy configuration loaded
checkpolicy:  writing binary representation &lt;span class="o"&gt;(&lt;/span&gt;version 29&lt;span class="o"&gt;)&lt;/span&gt; to sepolicy.new
$ sediff -q --stats sepolicy/sepolicy &lt;span class="se"&gt;\;&lt;/span&gt; sepolicy/sepolicy.new
$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$?&lt;/span&gt;
0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I quickly wrote a proof-of-concept tool called &lt;a class="reference external" href="https://github.com/ge0n0sis/sedump/"&gt;sedump&lt;/a&gt; few weeks ago, using &lt;a class="reference external" href="https://github.com/TresysTechnology/setools"&gt;setools4&lt;/a&gt;'s python bindings. As setools4
is still in alpha version and may conflict with setools3, I recommend to run it
inside a docker container:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt-get install docker-engine python-pip
$ sudo pip install docker-compose
$ git clone https://github.com/ge0n0sis/sedump
$ &lt;span class="nb"&gt;cd&lt;/span&gt; sedump/docker
$ docker-compose build master
$ docker-compose up -d master
$ docker-compose run master
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So far, it has been tested with sepolicy binaries built from AOSP and sepolicy
binaries extracted from Samsung stock ROMs. Currently, binary policies with
conditional access vectors are not working, I am still working on the problem.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker@5534108629ba:~$ &lt;span class="nb"&gt;cd&lt;/span&gt; setools
docker@5534108629ba:~/setools$ python setup.py develop
docker@5534108629ba:~/setools$ python sedump sepolicy -o policy.conf
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Outside the docker container, one can test that the &lt;tt class="docutils literal"&gt;policy.conf&lt;/tt&gt; file is
semantically equivalent to the original one, by compiling it and running a
diffing tool like &lt;tt class="docutils literal"&gt;sediff&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ checkpolicy -M -c &lt;span class="m"&gt;29&lt;/span&gt; -o sepolicy.new policy.conf
checkpolicy:  loading policy configuration from policy.conf
checkpolicy:  policy configuration loaded
checkpolicy:  writing binary representation &lt;span class="o"&gt;(&lt;/span&gt;version 29&lt;span class="o"&gt;)&lt;/span&gt; to sepolicy.new
$ sediff -q --stats sepolicy &lt;span class="se"&gt;\;&lt;/span&gt; sepolicy.new
$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$?&lt;/span&gt;
0
&lt;/pre&gt;&lt;/div&gt;
&lt;table class="docutils footnote" frame="void" id="id3" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;/col&gt;&lt;col&gt;&lt;/col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="http://androidxref.com/6.0.0_r1/xref/external/selinux/checkpolicy/test/dispol.c"&gt;dispol&lt;/a&gt;
currently only displays access vector and conditional access vector rules.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Security Enhancements for Android, and more generally SELinux, is a really
complex subject. In this article, I covered only a tiny part of this solution,
which has been an integral part of the Android security model since Android 4.3.&lt;/p&gt;
&lt;p&gt;We have dissected, first, Android's build system to understand how was
generated the SELinux kernel policy binary for Android. The whole build process
is not that different from SELinux for desktops, it heavily uses &lt;tt class="docutils literal"&gt;m4&lt;/tt&gt; and
&lt;tt class="docutils literal"&gt;checkpolicy&lt;/tt&gt; to respectively expand and build a monolithic policy from a set
of SELinux statements. As regular versions of &lt;tt class="docutils literal"&gt;m4&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;checkpolicy&lt;/tt&gt; are used,
one can build a &lt;tt class="docutils literal"&gt;sepolicy&lt;/tt&gt; out of Android source tree easily.&lt;/p&gt;
&lt;p&gt;Then, I dug further in the policy compilation process by analyzing the source
code of &lt;tt class="docutils literal"&gt;checkpolicy&lt;/tt&gt;. We introduced data structures used to store these statements
in memory and I presented briefly the file format of an SELinux kernel policy.
The &lt;tt class="docutils literal"&gt;sepolicy&lt;/tt&gt; binary is simply a serialized version of a &lt;code class="cpp"&gt;&lt;span class="n"&gt;policydb_t&lt;/span&gt;&lt;/code&gt;
structure, built from parsing the &lt;tt class="docutils literal"&gt;policy.conf&lt;/tt&gt; file.&lt;/p&gt;
&lt;p&gt;Finally, I introduced a proof-of-concept tool, &lt;a class="reference external" href="https://github.com/ge0n0sis/sedump/"&gt;sedump&lt;/a&gt;, to decompile or
deserialize a &lt;tt class="docutils literal"&gt;sepolicy&lt;/tt&gt; binary into a text file &lt;tt class="docutils literal"&gt;policy.conf&lt;/tt&gt;, and, to my
surprise, no such tool exists. Once decompiled, one can audit the SELinux
policy the hard way, modify it and compile it to get a new policy file if
needed.&lt;/p&gt;
&lt;p&gt;Please note that &lt;a class="reference external" href="https://github.com/ge0n0sis/sedump/"&gt;sedump&lt;/a&gt; is still in alpha-version: do not hesitate to give
us feedbacks or report failing test cases to us via github. A known limitation
is binary policies with conditional access vectors, &lt;tt class="docutils literal"&gt;if/else&lt;/tt&gt; statement may
not be correctly rendered. There is a lot of work to do before thinking about
merging it into &lt;a class="reference external" href="https://github.com/TresysTechnology/setools"&gt;setools4&lt;/a&gt;'s
mainline.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="android"></category><category term="selinux"></category><category term="seandroid"></category><category term="sedump"></category></entry></feed>